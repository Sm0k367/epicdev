// Epic Landing Page - JavaScript Functionality
// Generated by CodeGenAgent with modern ES6+ features

class EpicLandingPageApp {
    constructor() {
        this.currentYear = new Date().getFullYear();
        this.init();
    }

    init() {
        document.addEventListener('DOMContentLoaded', () => {
            this.setupNavigation();
            this.setupContactForm();
            this.setupScrollEffects();
            this.setupIntersectionObserver(); // For animations
            this.updateCopyrightYear();
            // this.setupThemeDetection(); // Basic OS theme detection (can be enhanced)
            console.log('Epic Landing Page Initialized by AI Agent');
        });
    }

    setupNavigation() {
        const navToggle = document.querySelector('.nav-toggle');
        const navMenu = document.querySelector('.nav-menu');
        const navLinks = document.querySelectorAll('.nav-link');
        const header = document.querySelector('.header');

        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                const isExpanded = navMenu.classList.toggle('active');
                navToggle.classList.toggle('active');
                navToggle.setAttribute('aria-expanded', isExpanded);
            });
        }

        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href');
                const targetSection = document.querySelector(targetId);

                if (targetSection) {
                    const headerHeight = header.offsetHeight;
                    const targetPosition = targetSection.offsetTop - headerHeight;
                    window.scrollTo({ top: targetPosition, behavior: 'smooth' });
                }

                if (navMenu && navMenu.classList.contains('active')) {
                    navMenu.classList.remove('active');
                    navToggle.classList.remove('active');
                    navToggle.setAttribute('aria-expanded', 'false');
                }
            });
        });

        // Active navigation highlighting on scroll
        const debouncedUpdateActiveNav = this.debounce(() => this.updateActiveNavigation(sections, navLinks, headerHeight), 100);
        const sections = document.querySelectorAll('section[id]');
        const headerHeight = header.offsetHeight; // Initial height
        window.addEventListener('scroll', debouncedUpdateActiveNav);
        this.updateActiveNavigation(sections, navLinks, headerHeight); // Initial call
    }

    updateActiveNavigation(sections, navLinks, headerHeight) {
        let currentSectionId = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop - headerHeight - 50; // Adjusted offset
            if (window.scrollY >= sectionTop) {
                currentSectionId = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${currentSectionId}`) {
                link.classList.add('active');
            }
        });
    }

    setupContactForm() {
        const form = document.getElementById('contactForm');
        const formStatusEl = document.getElementById('formStatus');

        if (form && formStatusEl) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!this.validateForm(form)) {
                    this.showFormStatus(formStatusEl, 'Please correct the errors in the form.', 'error');
                    return;
                }
                await this.handleFormSubmission(form, formStatusEl);
            });

            const inputs = form.querySelectorAll('input[required], textarea[required]');
            inputs.forEach(input => {
                input.addEventListener('blur', (e) => this.validateField(e.target));
                input.addEventListener('input', (e) => this.clearFieldError(e.target));
            });
        }
    }

    validateField(field) {
        let isValid = true;
        let message = '';
        const errorDisplayId = field.getAttribute('aria-describedby');
        const errorDisplay = errorDisplayId ? document.getElementById(errorDisplayId) : null;

        this.clearFieldError(field); // Clear previous error

        if (field.hasAttribute('required') && field.value.trim() === '') {
            isValid = false;
            message = `${field.labels[0] ? field.labels[0].textContent : 'This field'} is required.`;
        } else if (field.type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(field.value.trim())) {
                isValid = false;
                message = 'Please enter a valid email address.';
            }
        } else if (field.name === 'name' && field.value.trim().length < 2) {
             isValid = false;
             message = 'Name must be at least 2 characters.';
        }
        // Add more specific validations if needed

        if (!isValid) {
            field.classList.add('error');
            field.setAttribute('aria-invalid', 'true');
            if (errorDisplay) {
                errorDisplay.textContent = message;
            }
        } else {
            field.setAttribute('aria-invalid', 'false');
        }
        return isValid;
    }

    validateForm(form) {
        let isFormValid = true;
        const inputs = form.querySelectorAll('input[required], textarea[required]');
        inputs.forEach(input => {
            if (!this.validateField(input)) {
                isFormValid = false;
            }
        });
        return isFormValid;
    }

    clearFieldError(field) {
        field.classList.remove('error');
        field.setAttribute('aria-invalid', 'false');
        const errorDisplayId = field.getAttribute('aria-describedby');
        const errorDisplay = errorDisplayId ? document.getElementById(errorDisplayId) : null;
        if (errorDisplay) {
            errorDisplay.textContent = '';
        }
    }

    async handleFormSubmission(form, statusElement) {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;

        submitButton.innerHTML = '

i
Sending...'; submitButton.disabled = true;

    try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        // Simulate random success/failure
        if (Math.random() > 0.1) { // 90% success rate
            this.showFormStatus(statusElement, '🎉 Thank you! Your message has been sent.', 'success');
            form.reset();
            // Clear individual field errors after successful submission
            form.querySelectorAll('input[required], textarea[required]').forEach(input => this.clearFieldError(input));
            this.trackEvent('form_submission_success', { formName: 'contactForm' });
        } else {
            throw new Error('Simulated server error.');
        }
    } catch (error) {
        this.showFormStatus(statusElement, '⚠️ Sorry, there was an error. Please try again.', 'error');
        this.trackEvent('form_submission_error', { formName: 'contactForm', error: error.message });
    } finally {
        submitButton.innerHTML = originalButtonText;
        submitButton.disabled = false;
    }
}

showFormStatus(element, message, type) {
    element.textContent = message;
    element.className = `form-status ${type}`; // Ensure only one type class
    element.style.display = 'block';
    if (type === 'success') {
        setTimeout(() => { element.style.display = 'none'; }, 5000);
    }
}

setupScrollEffects() {
    const header = document.querySelector('.header');
    if (header) {
        const debouncedScrollHandler = this.debounce(() => {
            if (window.scrollY > 50) { // Add 'scrolled' class after 50px scroll
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        }, 10); // Debounce for 10ms
        window.addEventListener('scroll', debouncedScrollHandler);
    }
}

setupIntersectionObserver() {
    const animatedElements = document.querySelectorAll('.feature-card, .workflow-step, .tech-item, .stat, .hero-content, .hero-visual, .about-text, .about-visual, .contact-info, .contact-form');
    const observerOptions = {
        root: null, // viewport
        rootMargin: '0px',
        threshold: 0.1 // 10% of item visible
    };

    const observer = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
                obs.unobserve(entry.target); // Animate only once
            }
        });
    }, observerOptions);

    animatedElements.forEach(el => {
        el.classList.add('animate-on-scroll'); // Add base class for styling
        observer.observe(el);
    });

    // Add CSS for animations if not already in stylesheet
    const style = document.createElement('style');
    style.textContent = `
        .animate-on-scroll {
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }
        .animate-on-scroll.animate-in {
            opacity: 1;
            transform: translateY(0);
        }
    `;
    document.head.appendChild(style);
}

updateCopyrightYear() {
    const yearElement = document.getElementById('currentYear');
    if (yearElement) {
        yearElement.textContent = this.currentYear;
    }
}

// Utility: Debounce function
debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Analytics tracking (placeholder)
trackEvent(eventName, properties = {}) {
    console.log(`Analytics Event: ${eventName}`, properties);
    // In a real app, integrate with Google Analytics, Mixpanel, etc.
    // if (typeof gtag !== 'undefined') { gtag('event', eventName, properties); }
}
}

// Initialize the application const epicLandingPage = new EpicLandingPageApp();

